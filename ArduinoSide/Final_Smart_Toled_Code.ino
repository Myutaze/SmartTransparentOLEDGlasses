#include <string.h>
#include <SoftwareSerial.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <virtuabotixRTC.h>

#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);

SoftwareSerial EEBlue(10, 11); // RX | TX
virtuabotixRTC RTCD(4, 5, 6); // PIN 4: CLK, PIN5:DATA, PIN 6: RESET

// 'FinalLogo', 128x64px
const unsigned char ANKFinalLogo [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x60, 0x03, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x18, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0c, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x8c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc3, 0xe3, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x1c, 0x33, 0xec, 0x3c, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0x16, 0x99, 0xcd, 0xbc, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03, 0xcc, 0x99, 0xe0, 0x80, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x83, 0x00, 0xe6, 0x33, 0x08, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x0f, 0x82, 0x20, 0xf8, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xf0, 0xf0, 0x0f, 0x0f, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x05, 0x90, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0xf8, 0x70, 0x0e, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x07, 0x80, 0x21, 0xf0, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x83, 0x18, 0x66, 0x33, 0x18, 0x41, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03, 0xcc, 0xbb, 0xe0, 0x80, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x08, 0x01, 0x16, 0x99, 0xdd, 0xa4, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x1c, 0x33, 0xec, 0x3c, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc3, 0xe3, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30, 0x8c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0c, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x18, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x60, 0x06, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x80, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int ANKallArray_LEN = 1;
const unsigned char* ANKallArray[1] = {
  ANKFinalLogo
};



char cit[20];
char base[20];
char det[30];
float celcius, dollar, euro, pound;
int c,t,b,d,i,k,code;

int R = 7; // connect ir sensor to arduino pin 7
int a = 1;
int statusSensor;

int seconds = 00;
int minutes = 13;
int hours = 21;
int dayofweek = 1;
int dayofmonth = 31;
int month = 01;
int year = 2022;

void setup() {
  //RTCD.setDS1302Time(seconds, minutes, hours, dayofweek, dayofmonth, month, year);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  delay(2000);
  display.drawBitmap(0,0, ANKFinalLogo, 128, 64, WHITE);
  display.display();
  delay(2000);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(22,12);
  display.println("Welcome Myutaze");
  display.display();
  delay(2000);
  display.clearDisplay();
  display.display(); 
  Serial.begin(9600);    // 9600 is the default baud rate for the serial Bluetooth module
  EEBlue.begin(9600);
}

void loop() {
RTCD.updateTime();
 // check if data is avaliable
    if (EEBlue.available() > 0){

       for ( i = 0; i <= c ; i++){
      cit[i] = '\0';
     }
    
     for ( i = 0; i <= b ; i++){
      base[i] = '\0';
     }

    for ( i = 0; i <= d ; i++){
      det[i] = '\0';
     }

    code = '\0';
     
     c = EEBlue.parseInt(); 
     EEBlue.readBytes(cit, c);
       
     celcius = EEBlue.parseFloat(); 
     
     b = EEBlue.parseInt();
     EEBlue.readBytes(base, b);
     delay(1000);
     d = EEBlue.parseInt();
     EEBlue.readBytes(det, d);
     
     dollar = EEBlue.parseFloat();
    
     euro = EEBlue.parseFloat();
     
     pound = EEBlue.parseFloat();
     delay(1000);
     code = EEBlue.parseInt();
          
     if(code == 1){
      //Serial.println(code);
      //Serial.println("Intruder Alert");
      alert();
      delay(3000);
      display.clearDisplay();
      display.display();

     }
     
     delay(100);
     display.clearDisplay();
     display.display();
}

statusSensor = digitalRead(R);
if (statusSensor == 0){
delay(100);
display.clearDisplay();
display.display();
a++;
if(a > 3){
  a = 1;
  }
}

displayed(a);  
//city(cit);
//degree(celcius);
//basic(base);
//detail(det);
//dol(dollar);
//eur(euro);
//gbp(pound);
}

void displayed(int a){
  
 if(a == 1){   
     Time();
     Weekday();
     Date();  
    }
    
 if(a == 2){
     discity(cit);
     distemp(celcius);
     disbase(base);
     disdet(det);
    }
    
 if(a == 3){ 
     disdol(dollar);
     diseur(euro);
     disgbp(pound); 
    }

  
}

void Time(){

  String HOURS = String(RTCD.hours);
  String MINUTES = String(RTCD.minutes);

  if(RTCD.hours < 10){
    HOURS = correction(RTCD.hours);
  }
  
  if(RTCD.minutes < 10){
    MINUTES = correction(RTCD.minutes);
  }
  
  display.setCursor(0,0);
  display.print(HOURS);
  display.print(":");
  display.print(MINUTES);
  display.display();
 
  if(RTCD.seconds == 7){
    display.clearDisplay();
    display.display();
  }

  if(RTCD.seconds == 59){
    delay(1000);
    display.clearDisplay();
    display.display();
  }   
}

void Date(){
  
  String DAY = String(RTCD.dayofmonth);
  String MONTH = String(RTCD.month);

  if(RTCD.dayofmonth < 10){
    DAY = correction(RTCD.dayofmonth);
  }
  
  if(RTCD.month < 10){
    MONTH = correction(RTCD.month);
  }
 
  display.setCursor(65,10);
  display.print(DAY);
  display.print(".");
  display.print(MONTH);
  display.print(".");
  display.print(RTCD.year);
  display.display();
}

void Weekday(){
   display.setCursor(70,0);
   
   if(RTCD.dayofweek == 1){
    display.println("Monday");
    display.display();
  }

  if(RTCD.dayofweek == 2){
    display.println("Tuesday");
    display.display();
  }
  if(RTCD.dayofweek == 3){
    display.println("Wednesday");
    display.display();
  }
  if(RTCD.dayofweek == 4){
    display.println("Thursday");
    display.display();
  }
   if(RTCD.dayofweek == 5){;
    display.println("Friday");
    display.display();
  }
   if(RTCD.dayofweek == 6){
    display.println("Saturday");
    display.display();
  }
   if(RTCD.dayofweek == 7){
    display.println("Sunday");
    display.display();
  }
}


void discity(char dc[50]){
  display.setCursor(0,0);
  display.println(dc);
  display.display(); 
}

void distemp(float dt){
  display.setCursor(0,8);
  display.println(dt);
  display.setCursor(30,3);
  display.println(".");
  display.setCursor(35,8);
  display.println("C");
  display.display(); 
}

void disbase(char db[50]){
  display.setCursor(0,16);
  display.println(db);
  display.display(); 
}

void disdet(char dd[50]){
  display.setCursor(0,23);
  display.println(dd);
  display.display(); 
}
      
     
void disdol(float dd){
  display.setCursor(0,0);
  display.print("1 USD: ");
  display.print(dd);
  display.print(" TRY");
  display.display(); 
}


void diseur(float dt){
  display.setCursor(0,10);
  display.print("1 EUR: ");
  display.print(dt);
  display.print(" TRY");
  display.display(); 
}

void disgbp(float dp){
  display.setCursor(0,20);
  display.print("1 GBP: ");
  display.print(dp);
  display.print(" TRY");
  display.display(); 
} 

void alert(){
  display.clearDisplay();
  display.display();
  display.setCursor(0,10);
  display.println("INTRUDER ALERT!!!");
  display.display(); 
}



String correction(int a){
    
    String y;

    if(a == 0){
      y = "00";
    }
    
    if(a == 1){
      y = "01";
    }

    if(a == 2){
      y = "02";
    }

     if(a == 3){
      y = "03";
    }

     if(a == 4){
      y = "04";
    }

     if(a == 5){
      y = "05";
    }

     if(a == 6){
      y = "06";
    }

    if(a == 7){
      y = "07";
    }

    if(a == 8){
      y = "08";
    }

    if(a == 9){
      y = "09";
    }
  return y;
}

void city(char c[50]){
  Serial.print("City: ");
  Serial.println(c); 
 }

void degree(float d){
  Serial.print("Temperature: ");
  Serial.print(d);
  Serial.println("°C");
}

void basic(char b[50]){
  Serial.print("Weather: ");
  Serial.println(b);
 
}

void detail(char l[50]){
  Serial.print("Detail: ");
  Serial.println(l); 
 
}

void dol(float d){
  Serial.print("1 USD: ");
  Serial.print(d);
  Serial.println(" TRY");
}

void eur(float d){
  Serial.print("1 EUR: ");
  Serial.print(d);
  Serial.println(" TRY");
}

void gbp(float d){
  Serial.print("1 GBP: ");
  Serial.print(d);
  Serial.println(" TRY");
}



    
